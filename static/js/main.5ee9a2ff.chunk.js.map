{"version":3,"sources":["reportWebVitals.js","GlobalStyle.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","routes.js","common/Container/styled.js","common/Container/index.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/author/styled.js","features/author/AuthorPage.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/searchQueryParamName.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","common/Button/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","Navigation/styled.js","Navigation/index.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","selectLoading","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","toTask","Wrapper","styled","div","Container","children","Title","h1","Header","title","section","header","Body","h2","Section","body","extraHeaderContent","button","ParagraphContent","p","AuthorPage","StyledForm","form","Button","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","contentTrimmed","trim","content","nanoid","current","focus","Input","autoFocus","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","remove","StyledLink","Link","searchQueryParamName","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","query","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","StyledButton","Buttons","areTasksEmpty","isEveryTaskDone","disabled","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","TaskPage","useParams","find","getTaskById","activeClassName","StyledNavLink","NavLink","attrs","Navigation","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ee9a2ff.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        background:rgb(250, 237, 237);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {getTasksFromLocalStorage} from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({tasks}, {payload: task}) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({tasks}, {payload: taskId}) => {\r\n            const index = tasks.findIndex(({id}) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({tasks}, {payload: taskId}) => {\r\n            const index = tasks.findIndex(({id}) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({tasks}) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            } \r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, {payload:tasks}) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n        fetchExampleTasksError: state => {\r\n            state.loading = false;\r\n        }, \r\n        setTasks: (state, {payload:tasks}) => {\r\n            state.tasks = tasks;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask, \r\n    toggleHideDone, \r\n    toggleTaskDone, \r\n    removeTask, \r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksError,\r\n    fetchExampleTasksSuccess,\r\n    setTasks,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({done}) => done);\r\n\r\nexport const getTaskById = (state, taskId) => \r\n    selectTasks(state).find(({id}) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if(!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({content}) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\n\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\n\r\nexport default tasksSlice.reducer;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/tasks-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import {delay, \r\n    takeLatest, \r\n    takeEvery, \r\n    call, \r\n    put, \r\n    select\r\n} from \"redux-saga/effects\";\r\nimport {getExampleTasks} from \"./getExampleTasks\";\r\nimport {saveTasksInLocalStorage} from \"./tasksLocalStorage\";\r\nimport {fetchExampleTasks, \r\n    fetchExampleTasksSuccess, \r\n    fetchExampleTasksError, \r\n    selectTasks\r\n} from \"./tasksSlice\"; \r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(3000);\r\n        const exampleTasks = yield call(getExampleTasks); \r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch(error){\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Something went wrong :/\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import {all} from \"redux-saga/effects\";\r\nimport {tasksSaga} from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","export const toTask = ({id} = {id: \":id\"}) => `/zadania/${id}`;\r\nexport const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/autor\";\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n    font-family: 'Roboto', sans-serif;\r\n`;","import {Wrapper} from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>{children}</Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 1.6em;\r\n    margin: 5px 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        font-size: 1.2em;\r\n    }\r\n`;","import {Title} from \"./styled\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <Title>{title}</Title>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 12px 0;\r\n    background: white;\r\n    box-shadow: 0 0 10px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 15px;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 1.3em;\r\n    margin: 0;\r\n\r\n    @media (max-width: 767px) {\r\n        font-size: 1.1em;\r\n    }\r\n`;","import {Wrapper, Header, Body, Title} from \"./styled\"\r\n\r\nconst Section = ({title, body, extraHeaderContent, button}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n            {button}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const ParagraphContent = styled.p`\r\n    padding: 10 px 50px;\r\n    font-family: 'Roboto', sans-serif;\r\n    line-height: 2.5;\r\n    text-align: center;\r\n`;","import Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\nimport {ParagraphContent} from \"./styled\";\r\n\r\nexport const AuthorPage = () => (\r\n    <Container>\r\n        <Header title=\"O autorze\"/>\r\n        <Section \r\n            title=\"Wojciech K\" \r\n            body={\r\n                <>\r\n                <ParagraphContent>\"W życiu biegnę za marzeniem i&nbsp;wchodzę w&nbsp;kolejny challenge...\" 😀.<br/>\r\n                Każdego dnia staram się przyswoić nową wiedzę z&nbsp;zakresu programowania \r\n                w&nbsp;technologii Front-end oraz nauczyć się nowych słówek i&nbsp;konstrukcji\r\n                gramatycznych w&nbsp;językach: angielskim 🇺🇸 i&nbsp;hiszpańskim 🇪🇸.<br/> \r\n                Motto, które mi przyświeca to \"nieustanny rozwój\".</ParagraphContent>\r\n                </>\r\n            } \r\n        />\r\n    </Container>\r\n);","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background: teal;\r\n    color: white;\r\n    border: none;\r\n    transition: 0.7s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.2); \r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;","import {useState, useRef} from \"react\";\r\nimport {StyledForm, Button} from \"./styled\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {nanoid} from \"@reduxjs/toolkit\";\r\nimport {addTask} from \"../../tasksSlice\";\r\nimport Input from \"../../Input\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const contentTrimmed = newTaskContent.trim();\r\n            \r\n        if (!contentTrimmed) {\r\n            return;\r\n        }\r\n        \r\n        dispatch(addTask({\r\n            content: contentTrimmed,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n    \r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input  \r\n                autoFocus\r\n                ref={inputRef}\r\n                value={newTaskContent}  \r\n                placeholder=\"Rzecz do zrobienia\" \r\n                onChange={(event) => setNewTaskContent(event.target.value)} \r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, {css} from \"styled-components\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n    word-break: break-word;\r\n\r\n    ${({hidden}) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: white;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background-color 0.5s;\r\n    cursor: pointer;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n        background-color: rgb(0, 128, 64);\r\n\r\n        &:hover {\r\n            filter: brightness(120%);\r\n            transform: scale(1.2);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(140%);\r\n        }\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background-color: rgb(199, 3, 3);\r\n\r\n        &:hover {\r\n            filter: brightness(120%);\r\n            transform: scale(1.2);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(140%);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: black;\r\n`;","export const searchQueryParamName = \"szukaj\";","import {useHistory, useLocation} from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    return searchParams.get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({key, value}) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if(value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    }\r\n};","import {List, Item, Content, Button, StyledLink} from \"./styled\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {\r\n    toggleTaskDone, \r\n    removeTask,\r\n    selectHideDone,\r\n    selectTasksByQuery,\r\n} from \"../../tasksSlice\";\r\nimport {toTask} from \"../../../../routes\";\r\nimport {searchQueryParamName} from \"../../searchQueryParamName\";\r\nimport {useQueryParameter} from \"../queryParameters\";\r\n\r\nconst TaskList = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n    \r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledLink to={toTask({id: task.id})}>{task.content}</StyledLink>    \r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: medium;\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    background: transparent;\r\n    color: #015c7a;\r\n    border: none;\r\n    margin: 10px 2px;\r\n    transition: background-color 1.2s;\r\n    cursor: pointer;\r\n\r\n    @media (max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(50%);\r\n        transform: scale(1.1)\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(25%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: #ccc;\r\n        cursor: not-allowed;\r\n    }\r\n`;","import React from \"react\";\r\nimport {Wrapper, StyledButton} from \"./styled\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    toggleHideDone, \r\n    setAllDone, \r\n    selectHideDone,\r\n    selectAreTasksEmpty,\r\n    selectIsEveryTaskDone,\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n    \r\n    return (\r\n        <Wrapper>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <StyledButton onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż \" : \"Ukryj \"} \r\n                            zrobione\r\n                    </StyledButton>\r\n                    <StyledButton \r\n                        onClick={() => dispatch(setAllDone())} \r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </StyledButton>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import Input from \"../../Input\"\r\nimport {Wrapper} from \"./styled\";\r\nimport {useQueryParameter, useReplaceQueryParameter} from \"../queryParameters\";\r\nimport {searchQueryParamName} from \"../../searchQueryParamName\";\r\n\r\nexport const Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n    const onInputChange = ({target}) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined, \r\n        });\r\n    };\r\n    \r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};","import {StyledButton} from \"../../features/tasks/TasksPage/Buttons/styled\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchExampleTasks, selectLoading} from \"../../../src/features/tasks/tasksSlice\";\r\n\r\nconst Button = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n\r\n    return (\r\n        <StyledButton\r\n            disabled={loading}\r\n            onClick={\r\n                () => dispatch(fetchExampleTasks())\r\n            }\r\n        >\r\n            {\r\n                loading\r\n                    ? \"Ładowanie...\"\r\n                    : \"Pobierz przykładowe zadania\"\r\n            }\r\n        </StyledButton>\r\n    );\r\n};\r\n\r\nexport default Button;","import Form from \"../TasksPage/Form\";\nimport TaskList from \"../TasksPage/TaskList\";\nimport Buttons from \"../TasksPage/Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport {Search} from \"./Search\";\nimport Button from \"../../../common/Button\";\n\nfunction TasksPage() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\"/>\n      <>\n      <Section \n        title=\"Dodaj nowe zadanie\"\n        button={<Button/>} \n        body={<Form/>} \n      />\n      <Section \n        title=\"Wyszukiwarka\" \n        body={<Search/>} \n      />\n      <Section \n        title=\"Lista zadań\"\n        body={<TaskList/>}\n        extraHeaderContent={<Buttons/>} \n      />\n      </>\n    </Container>\n  );\n}\n\nexport default TasksPage;","import {useParams} from \"react-router-dom\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getTaskById} from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n    const {id} = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\"/>\r\n      <Section \r\n        title={task? task.content : \"Nie znaleziono zadania\"} \r\n        body={\r\n          !!task && (\r\n            <>\r\n              <strong>Ukończono: </strong>{task.done ? \"tak\" : \"nie\"}\r\n            </>\r\n          )\r\n        } \r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TaskPage;","import styled from \"styled-components\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst activeClassName = \"link-active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    color: white;\r\n    text-decoration: none;\r\n\r\n    &.${activeClassName} {\r\n        font-weight: bold;\r\n    }\r\n\r\n    &:hover{\r\n        text-decoration: underline;\r\n    }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    background: #0485b0;\r\n    margin: 5px auto;\r\n    padding: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    list-style: none;\r\n    max-width: 860px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    margin: 20px;\r\n`;","import {toAuthor, toTasks} from \"../routes\";\r\nimport {List, Item, StyledNavLink} from \"./styled\";\r\n\r\nexport const Navigation = () => {\r\n    return (\r\n        <nav>\r\n            <List>\r\n                <Item>\r\n                    <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n                </Item>\r\n                <Item>\r\n                    <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n                </Item>\r\n            </List>\r\n        </nav>\r\n    );\r\n};","import {HashRouter, Switch, Route, Redirect} from 'react-router-dom';\r\nimport {toAuthor, toTask, toTasks} from './routes';\r\nimport {AuthorPage} from './features/author/AuthorPage';\r\nimport TasksPage from './features/tasks/TasksPage';\r\nimport TaskPage from './features/tasks/TaskPage';\r\nimport {Navigation} from './Navigation';\r\n\r\nexport const App = () => (\r\n    <HashRouter>\r\n        <Navigation/>\r\n            <Switch>\r\n                <Route path={toTask()}>\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path={toTasks()}>\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path={toAuthor()}>\r\n                    <AuthorPage />\r\n                </Route>\r\n                <Route>\r\n                    <Redirect to={toTasks()}/>\r\n                </Route>    \r\n            </Switch>\r\n    </HashRouter>\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport {GlobalStyle} from \"./GlobalStyle\";\nimport store from './store';\nimport {Provider} from 'react-redux';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle/>\n        <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}