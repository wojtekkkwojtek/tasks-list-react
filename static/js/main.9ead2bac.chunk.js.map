{"version":3,"sources":["reportWebVitals.js","GlobalStyle.js","features/tasks/Form/styled.js","features/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","rootSaga.js","store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","StyledForm","styled","form","Input","input","Button","button","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","contentTrimmed","trim","content","nanoid","current","focus","autoFocus","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","remove","TaskList","useSelector","map","onClick","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","Wrapper","div","Buttons","areTasksEmpty","isEveryTaskDone","disabled","section","Header","header","Body","Title","h2","Section","title","body","extraHeaderContent","Container","children","Tasks","App","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ead2bac.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        background:rgb(178, 199, 218);\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background: teal;\r\n    color: white;\r\n    border: none;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background: rgb(0, 128, 90);\r\n        transform: scale(1.3); \r\n    }\r\n\r\n    &:active {\r\n        background: rgb(0, 128, 43);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {getTasksFromLocalStorage} from \"../tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({tasks}, {payload: task}) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({tasks}, {payload: taskId}) => {\r\n            const index = tasks.findIndex(({id}) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({tasks}, {payload: taskId}) => {\r\n            const index = tasks.findIndex(({id}) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({tasks}) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            } \r\n        },\r\n        fetchExampleTasks: () => {},\r\n        setTasks: (state, {payload:tasks}) => {\r\n            state.tasks = tasks;\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask, \r\n    toggleHideDone, \r\n    toggleTaskDone, \r\n    removeTask, \r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({done}) => done);\r\n\r\nexport default tasksSlice.reducer;","import {useState, useRef} from \"react\";\r\nimport {StyledForm, Input, Button} from \"./styled\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {nanoid} from \"@reduxjs/toolkit\";\r\nimport {addTask} from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const contentTrimmed = newTaskContent.trim();\r\n            \r\n        if (!contentTrimmed) {\r\n            return;\r\n        }\r\n        \r\n        dispatch(addTask({\r\n            content: contentTrimmed,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n    \r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input \r\n                autoFocus\r\n                ref={inputRef}\r\n                value={newTaskContent}  \r\n                placeholder=\"Rzecz do zrobienia\" \r\n                onChange={(event) => setNewTaskContent(event.target.value)} \r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, {css} from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n    word-break: break-word;\r\n\r\n    ${({hidden}) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color: white;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n    transition: background-color 0.5s;\r\n    cursor: pointer;\r\n\r\n    ${({toggleDone}) => toggleDone && css`\r\n        background-color: rgb(0, 128, 64);\r\n\r\n        &:hover {\r\n            background-color: rgb(1, 95, 48);\r\n        }\r\n\r\n        &:active {\r\n            background-color: rgb(2, 49, 25);\r\n        }\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background-color: rgb(199, 3, 3);\r\n\r\n        &:hover {\r\n            background-color: rgb(138, 3, 3);\r\n        }\r\n\r\n        &:active {\r\n            background-color: rgb(80, 1, 1);\r\n        }\r\n    `}\r\n`;","import {List, Item, Content, Button} from \"./styled\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {\r\n    selectTasks, \r\n    toggleTaskDone, \r\n    removeTask,\r\n    selectHideDone,\r\n} from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n            \r\n                    <Content done={task.done}>\r\n                        {task.content}    \r\n                    </Content>\r\n            \r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default TaskList;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/tasks-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import {delay, takeLatest, takeEvery, call, put, select} from \"redux-saga/effects\";\r\nimport {getExampleTasks} from \"./getExampleTasks\";\r\nimport {saveTasksInLocalStorage} from \"../tasksLocalStorage\";\r\nimport {fetchExampleTasks, setTasks, selectTasks} from \"./tasksSlice\"; \r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks); \r\n        yield put(setTasks(exampleTasks));\r\n    } catch(error){\r\n        yield call(alert, \"Something went wrong :/\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: medium;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: teal;\r\n    border: none;\r\n    margin: 10px;\r\n    transition: background-color 0.5s;\r\n    cursor: pointer;\r\n\r\n    @media (max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover {\r\n        color: rgb(2, 73, 73);\r\n    }\r\n\r\n    &:active {\r\n        color: rgb(1, 22, 22);\r\n    }\r\n\r\n    &:disabled {\r\n        color: #ccc;\r\n        cursor: not-allowed;\r\n    }\r\n`;","import React from \"react\";\r\nimport {tasksSaga} from \"../tasksSaga\";\r\nimport {Wrapper, Button} from \"./styled\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    selectTasks, \r\n    toggleHideDone, \r\n    setAllDone, \r\n    selectHideDone,\r\n    selectAreTasksEmpty,\r\n    selectIsEveryTaskDone,\r\n    fetchExampleTasks,\r\n} from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n    \r\n    const dispatch = useDispatch();\r\n    \r\n    return (\r\n        <Wrapper>\r\n            <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n                Pobierz przykładowe zadania\r\n            </Button>\r\n            \r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż \" : \"Ukryj \"} \r\n                            zrobione\r\n                    </Button>\r\n                \r\n                    <Button \r\n                        onClick={() => dispatch(setAllDone())} \r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 1px solid #ddd;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 1.5em;\r\n    margin: 0;\r\n`;","import {Wrapper, Header, Body, Title} from \"./styled\"\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n    font-family: 'Roboto', sans-serif;\r\n`;","import {Wrapper} from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>{children}</Wrapper>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Container from \"../../common/Container\";\n\nfunction Tasks() {\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\"/>\n      <Section \n        title=\"Dodaj nowe zadanie\" \n        body={<Form/>} \n      />\n      <Section \n        title=\"Lista zadań\"\n        body={<TaskList/>}\n        extraHeaderContent={<Buttons/>} \n      />\n    </Container>\n  );\n}\n\nexport default Tasks;","import Tasks from './features/tasks/Tasks';\r\n\r\nconst App = () => <Tasks/>;\r\n\r\nexport default App ;","import {all} from \"redux-saga/effects\";\r\nimport {tasksSaga} from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport {GlobalStyle} from \"./GlobalStyle\";\nimport App from './App';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}